https://leetcode.com/problems/two-sum/
// uses hashmap function can also use greedyapproch by sorting and using left and right pointers adding them then increasing leftpointer if sum is less than target if sum is > the decrement right pointerbut need to
// to store the initial arrays along with their original inddexs before sorting 

class Solution {
    public int[] twoSum(int[] a, int target) {
        int n=a.length;
        HashMap<Integer,Integer> numMap=new HashMap<>();
        for(int i=0;i<n;i++){
            numMap.put(a[i],i);
        }
        for(int i=0;i<n;i++){
            int complement=target-a[i];
            if(numMap.containsKey(complement)&& numMap.get(complement)!=i){
                return new int[]{i,numMap.get(complement)};
            }
        }
        return new int[]{};
    }
}



// brutefore
class Solution {
    public int[] twoSum(int[] a, int target) {
       for(int i=0;i<a.length-1;i++){
        for(int j=i+1;j<a.length;j++){
            if((a[i]+a[j])==target)
            {
                return new int[]{i,j};
            }
            }
        }
       return new int[]{};
    }
}
